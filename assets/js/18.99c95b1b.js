(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{189:function(s,a,e){"use strict";e.r(a);var n=e(0),t=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"一-单线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-单线程","aria-hidden":"true"}},[s._v("#")]),s._v(" 一.单线程")]),s._v(" "),e("p",[s._v("我们常说“JavaScript是单线程的”。")]),s._v(" "),e("p",[s._v("所谓单线程，是指在JS引擎中负责解释和执行JavaScript代码的线程只有一个。不妨叫它主线程。")]),s._v(" "),e("p",[s._v("但是实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。这些线程可能存在于JS引擎之内，也可能存在于JS引擎之外，在此我们不做区分。不妨叫它们工作线程。")]),s._v(" "),e("p",[s._v("二.同步和异步")]),s._v(" "),e("p",[s._v("假设存在一个函数A：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("A(args...);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("同步")]),s._v("：如果在函数A返回的时候，调用者就能够得到预期结果(即拿到了预期的返回值或者看到了预期的效果)，那么这个函数就是同步的。")]),s._v(" "),e("p",[s._v("例如：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Math.sqrt(2);\nconsole.log('Hi');\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[e("p",[s._v("第一个函数返回时，就拿到了预期的返回值：2的平方根。")])]),s._v(" "),e("li",[e("p",[s._v("第二个函数返回时，就看到了预期的效果：在控制台打印了一个字符串。")])])]),s._v(" "),e("p",[s._v("所以这两个函数都是同步的。")]),s._v(" "),e("p",[e("strong",[s._v("异步")]),s._v("：如果在函数A返回的时候，调用者还不能够得到预期结果，而是需要在将来通过一定的手段得到，那么这个函数就是异步的。")]),s._v(" "),e("p",[s._v("例如：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("fs.readFile('foo.txt', 'utf8', function(err, data) {\n    console.log(data);\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("在上面的代码中，我们希望通过fs.readFile函数读取文件foo.txt中的内容，并打印出来。\n但是在fs.readFile函数返回时，我们期望的结果并不会发生，而是要等到文件全部读取完成之后。如果文件很大的话可能要很长时间。")]),s._v(" "),e("p",[s._v("下面以AJAX请求为例，来看一下同步和异步的区别：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("[ ] 异步AJAX：")])]),s._v(" "),e("li",[e("p",[s._v("主线程：“你好，AJAX线程。请你帮我发个HTTP请求吧，我把请求地址和参数都给你了。”")])]),s._v(" "),e("li",[e("p",[s._v("AJAX线程：“好的，主线程。我马上去发，但可能要花点儿时间呢，你可以先去忙别的。”")])]),s._v(" "),e("li",[e("p",[s._v("主线程：：“谢谢，你拿到响应后告诉我一声啊。”")])]),s._v(" "),e("li",[e("p",[s._v("(接着，主线程做其他事情去了。一顿饭的时间后，它收到了响应到达的通知。)")])]),s._v(" "),e("li",[e("p",[s._v("[ ] 同步AJAX：")])]),s._v(" "),e("li",[e("p",[s._v("主线程：“你好，AJAX线程。请你帮我发个HTTP请求吧，我把请求地址和参数都给你了。”")])]),s._v(" "),e("li",[e("p",[s._v("AJAX线程：“......”")])]),s._v(" "),e("li",[e("p",[s._v("主线程：：“喂，AJAX线程，你怎么不说话？”")])]),s._v(" "),e("li",[e("p",[s._v("AJAX线程：“......”")])]),s._v(" "),e("li",[e("p",[s._v("主线程：：“喂！喂喂喂！”")])]),s._v(" "),e("li",[e("p",[s._v("AJAX线程：“......”")])]),s._v(" "),e("li",[e("p",[s._v("(一炷香的时间后)")])]),s._v(" "),e("li",[e("p",[s._v("主线程：：“喂！求你说句话吧！”")])]),s._v(" "),e("li",[e("p",[s._v("AJAX线程：“主线程，不好意思，我在工作的时候不能说话。你的请求已经发完了，拿到响应数据了，给你。”")])])]),s._v(" "),e("p",[s._v("正是由于JavaScript是单线程的，而异步容易实现非阻塞，所以在JavaScript中对于耗时的操作或者时间不确定的操作，使用异步就成了必然的选择。异步是这篇文章关注的重点。")]),s._v(" "),e("h2",{attrs:{id:"三-异步过程的的构成要素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-异步过程的的构成要素","aria-hidden":"true"}},[s._v("#")]),s._v(" 三.异步过程的的构成要素")]),s._v(" "),e("p",[s._v("从上文可以看出，"),e("strong",[s._v("异步函数")]),s._v("实际上很快就调用完成了==。但是后面还有工作线程执行异步任务、通知主线程、主线程调用回调函数等很多步骤。我们把整个过程==叫做"),e("strong",[s._v("异步过程")]),s._v("。异步函数的调用在整个异步过程中，只是一小部分。")]),s._v(" "),e("p",[s._v("总结 一个异步过程的通常是这样的：")]),s._v(" "),e("p",[s._v("主线程发起一个异步请求，相应的工作线程接收请求并告知主线程已经收到（"),e("strong",[s._v("异步函数的返回")]),s._v("）；主线程可以继承执行后面的代码，同时工作线程执行异步任务；工作线程完成工作后通知主线程，主线程收到通知后执行一点的动作（"),e("strong",[s._v("调用回调函数")]),s._v(")")]),s._v(" "),e("p",[s._v("异步函数通常具有以下的形式：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("A(args..., callbackFn)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("它可以叫做异步过程的发起函数，或者叫做异步任务注册函数，args是这个函数需要的参数，callbackFn也是这个函数的参数，但是它比较特殊的所以单独列出来")]),s._v(" "),e("p",[s._v("所以，从主线程的角度看，一个异步过程包括下面两个要素：")]),s._v(" "),e("ul",[e("li",[s._v("发起函数（或叫注册函数）A")]),s._v(" "),e("li",[s._v("回调函数callbackFn")])]),s._v(" "),e("p",[e("strong",[s._v("它们都是主线程调用的，其中注册函数用来发起异步过程，回调函数用来处理结果")]),s._v("。")]),s._v(" "),e("p",[s._v("举个具体的例子：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("setTimeout(fn, 1000);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("其中的setTimeout就是异步过程的发起函数，fn是调用函数。")]),s._v(" "),e("p",[s._v("注意：前面说的形式A(args..., callbackFn)只是一种抽象的表示，并不代表回调函数一定要作为发起函数的参数，例如：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var xhr = new XMLHttpRequest();\nxhr.onreadystatechange = xxx; // 添加回调函数\nxhr.open('GET', url);\nxhr.send(); // 发起函数\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("发起函数和回调函数就是分离的")]),s._v(" "),e("p",[s._v("四.消息队列和事件循环")]),s._v(" "),e("p",[s._v("上文讲到，异步过程中，工作线程在异步操作完成后需要通知主线程。那么这个"),e("strong",[s._v("通知机制")]),s._v("是怎样实现的呢？答案是利用==消息队列和事件循环。==")]),s._v(" "),e("p",[s._v("用一句话概括：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("工作线程将消息放到消息队列，主线程通过事件循环过程去取消息。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[e("strong",[s._v("消息队列")]),s._v("：消息队列是一个先进先出的队列，它里面存放着各种消息")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("事件循环")]),s._v("：事件循环是指主线程的重复从消息队列中去取消息，执行的过程。")])]),s._v(" "),e("li")]),s._v(" "),e("p",[s._v("实际上，主线程只会做一件事，就是从消息队列里去消息，执行消息，再取消息，再执行，当消息队列为空时，就会等待直到消息队列变成非空，而且主线程只要在将当前的消息执行完成后，才会取下一个消息。这种机制就叫事件循环机制，取一消息并执行的过程叫做一次循环。")]),s._v(" "),e("p",[s._v("事件循环用代码表示大概是这样的：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("while(true) {\n    var message = queue.get();\n    execute(message);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("那么，消息队列中放的"),e("strong",[s._v("消息")]),s._v("具体是什么东西？消息的具体结构当然跟具体的实现有关，但是为了简单起见，我们可以认为：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("消息就是注册异步任务时添加的回调函数\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("再次以异步AJAX为例，假设存在如下的代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$.ajax('http://segmentfault.com', function(resp) {\n    console.log('我是响应：', resp);\n});\n\n// 其他代码\n...\n...\n...\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("主线程在发起AJAX请求后，会继续执行其他代码。"),e("strong",[s._v("AJAX")]),s._v("线程负责请求segmentfault.com，拿到响应后，它会把响应封装成一个JavaScript对象，然后构造一条消息：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 消息队列中的消息就长这个样子\nvar message = function () {\n    callbackFn(response);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("其中的callbackFn就是前面代码中得到成功响应时的回调函数")]),s._v(" "),e("p",[s._v("主线程在执行完当前循环中的所有代码后，就会到消息队列取出这条消息(也就是message函数)，并执行它。到此为止，就完成了工作线程对主线程的通知，回调函数也就得到了执行。如果一开始主线程就没有提供回调函数，AJAX线程在收到HTTP响应后，也就没必要通知主线程，从而也没必要往消息队列放消息。")]),s._v(" "),e("p",[s._v("用图表示这个过程就是：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://segmentfault.com/img/bVxLvF",alt:"image"}})]),s._v(" "),e("p",[s._v("从上文中我们也可以得到这样一个明显的结论，就是：")]),s._v(" "),e("ul",[e("li",[e("blockquote",[e("p",[s._v("异步过程的回调函数，一定不在当前这一轮事件循环中执行。")])])])]),s._v(" "),e("p",[s._v("五.异步与事件")]),s._v(" "),e("p",[s._v("上文说到的“事件循环”，为什么里面有个"),e("strong",[s._v("事件")]),s._v("呢 那是因为：")]),s._v(" "),e("blockquote",[e("p",[s._v("消息队列中的每条消息实际上都是对应着一个事件。")])]),s._v(" "),e("p",[s._v("上文中一直没有提到一类很重要的异步过程："),e("strong",[s._v("DOM事件")]),s._v("。")]),s._v(" "),e("p",[s._v("举例来说：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var button = document.getElement('#btn');\nbutton。addEventLister('click',function(e){\n    console.log();\n})\n\n\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("从事件的角度来看，上述的代码表示：在按钮上添加了一个鼠标单击事件的事件监听器，当用户点击按钮时，鼠标单击事件触发，事件监听器函数被调用。")]),s._v(" "),e("p",[s._v("从异步过程的角度看， addEventLister 函数就是异步过程的发函数，事件监听器函数就是异步过程的回调函数， 事件触发时，表示异步任务完成，将事件监听函数封装成一条消息队列中，等待主线程执行。")]),s._v(" "),e("p",[s._v("事件的概念实际上并不是必须的，事件机制实际上就是异步过程的通知机制，我觉得它的存在是为了编程接口对开发者更友好\n另一方面，所有的异步过程也都可以用事件来描述，例如：setTimeout可以看成对应一个时间到了！的事件。前文的setTimeout(fn, 1000);可以看成：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("timer.addEventListener('timeout', 1000, fn);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("六. 生产者与消费者")]),s._v(" "),e("blockquote",[e("p",[s._v("从生产者与消费者的角度看，异步过程是这样的：")]),s._v(" "),e("p",[s._v("工作线程是生产者，主线程是消费者(只有一个消费者)。工作线程执行异步任务，执行完成后把对应的回调函数封装成一条消息放到消息队列中；主线程不断地从消息队列中取消息并执行，当消息队列空时主线程阻塞，直到消息队列再次非空。")])]),s._v(" "),e("p",[s._v("七. 总结一下\n最后再用一个生活中的例子总结一下同步和异步：在公路上，汽车一辆接一辆，有条不紊的运行。这时，有一辆车坏掉了。假如它停在原地进行修理，那么后面的车就会被堵住没法行驶，交通就乱套了。幸好旁边有应急车道，可以把故障车辆推到应急车道修理，而正常的车流不会受到任何影响。等车修好了，再从应急车道回到正常车道即可。唯一的影响就是，应急车道用多了，原来的车辆之间的顺序会有点乱。")]),s._v(" "),e("p",[s._v("这就是同步和异步的区别。同步可以保证顺序一致，但是容易导致阻塞；异步可以解决阻塞问题，但是会改变顺序性。改变顺序性其实也没有什么大不了的，只不过让程序变得稍微难理解了一些 😃")]),s._v(" "),e("p",[s._v("PS：ECMAScript 262规范中，并没有对异步、事件队列等概念及其实现的描述。这些都是具体的JavaScript运行时环境使用的机制。本文重点是描述异步过程的原理，为了便于理解做了很多简化。所以文中的某些术语的使用可能是不准确的，具体细节也未必是正确的，例如消息队列中消息的结构。请读者注意。")])])}],!1,null,null,null);a.default=t.exports}}]);